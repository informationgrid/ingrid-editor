/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package de.ingrid.igeserver.api;

import java.util.List;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import de.ingrid.igeserver.model.Data1;
import de.ingrid.igeserver.model.InlineResponse200;
import de.ingrid.igeserver.model.InlineResponseDefault;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-08-21T10:21:42.666Z")

@CrossOrigin(origins = "http://localhost:4300", maxAge = 3600)
@Api(value = "datasets", description = "the datasets API")
@RequestMapping(path="/api")
public interface DatasetsApi {

    @ApiOperation(value = "Create a complete dataset", notes = "xxx", response = Void.class, tags = { "Datasets", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "The stored dataset, which might contain additional storage information.", response = Void.class),
            @ApiResponse(code = 200, message = "Unexpected error", response = InlineResponseDefault.class) })
    @RequestMapping(value = "/datasets", produces = { "application/json" }, method = RequestMethod.POST)
    ResponseEntity<String> createDataset(
            @ApiParam(value = "The dataset to be stored.", required = true) @Valid @RequestBody String data,
            @ApiParam(value = "If we want to store the published version then this parameter has to be set to true.") @RequestParam(value = "publish", required = false) Boolean publish);
    
    @ApiOperation(value = "Update a complete dataset", notes = "xxx", response = Void.class, tags = { "Datasets", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "The stored dataset, which might contain additional storage information.", response = Void.class),
            @ApiResponse(code = 200, message = "Unexpected error", response = InlineResponseDefault.class) })
    @RequestMapping(value = "/datasets/{id}", produces = { "application/json" }, method = RequestMethod.PUT)
    ResponseEntity<String> updateDataset(
            @ApiParam(value = "The ID of the dataset.", required = true) @PathVariable("id") String id,
            @ApiParam(value = "The dataset to be stored.", required = true) @Valid @RequestBody String data,
            @ApiParam(value = "If we want to store the published version then this parameter has to be set to true.") @RequestParam(value = "publish", required = false) Boolean publish,
            @ApiParam(value = "Delete the draft version and make the published version the current one.") @RequestParam(value = "revert", required = false) Boolean revert);

    
    @ApiOperation(value = "Copy a dataset or tree under another dataset", notes = "xxx", response = Void.class, tags = { "Datasets", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Datasets have been copied successfully.", response = Void.class) })
    @RequestMapping(value = "/datasets/{ids}/copy", produces = { "application/json" }, method = RequestMethod.POST)
    ResponseEntity<Void> copyDatasets(
            @ApiParam(value = "IDs of the copied datasets", required = true) @PathVariable("ids") List<String> ids,
            @ApiParam(value = "...", required = true) @Valid @RequestBody Data1 data);

    @ApiOperation(value = "Deletes a dataset", notes = "...", response = Void.class, tags = { "Datasets", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "", response = Void.class),
            @ApiResponse(code = 200, message = "Unexpected error", response = InlineResponseDefault.class) })
    @RequestMapping(value = "/datasets/{id}", produces = { "application/json" }, method = RequestMethod.DELETE)
    ResponseEntity<String> deleteById(
            @ApiParam(value = "The ID of the dataset.", required = true) @PathVariable("id") String[] ids);

    @ApiOperation(value = "Export a dataset to a specific format", notes = "...", response = Void.class, tags = { "Datasets", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Dataset has been exported successfully.", response = Void.class) })
    @RequestMapping(value = "/datasets/{id}/export/{format}", produces = { "application/json" }, method = RequestMethod.GET)
    ResponseEntity<String> exportDataset(
            @ApiParam(value = "IDs of the copied datasets", required = true) @PathVariable("id") String id,
            @ApiParam(value = "e.g. ISO", required = true) @PathVariable("format") String format);

    @ApiOperation(value = "Get datasets by a query or as child documents", notes = "Get all datasets or those which match a given query. You can define the fields where the search should be, in case the documents have different attributes for their title. The results can also be sorted.", response = Void.class, tags = {
            "Datasets", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Datasets found", response = Void.class) })
    @RequestMapping(value = "/datasets", produces = { "application/json" }, method = RequestMethod.GET)
    ResponseEntity<String> find(
            @NotNull @ApiParam(value = "", required = true) @RequestParam(value = "fields", required = true) String[] fields,
            @ApiParam(value = "Find datasets by a search query.") @RequestParam(value = "query", required = false) String query,
            @ApiParam(value = "Get all children of a dataset. The parameter 'parentId' is also needed for this request.") @RequestParam(value = "children", required = false) Boolean children,
            @ApiParam(value = "The ID of the parent dataset to get the children from. If empty then the root datasets are returned.") @RequestParam(value = "parentId", required = false) String parentId,
            @ApiParam(value = "Sort by a given field.") @RequestParam(value = "sort", required = false) String sort,
            @ApiParam(value = "Reverse sort.") @RequestParam(value = "reverse", required = false) String reverse);

    @ApiOperation(value = "A complete dataset", notes = "Retrieve a dataset by a given ID.", response = InlineResponse200.class, tags = { "Datasets", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "The dataset with the given ID.", response = InlineResponse200.class),
            @ApiResponse(code = 200, message = "Unexpected error", response = InlineResponseDefault.class) })
    @RequestMapping(value = "/datasets/{id}", produces = { "application/json" }, method = RequestMethod.GET)
    ResponseEntity<String> getByID(
            @ApiParam(value = "The ID of the dataset.", required = true) @PathVariable("id") String id,
            @ApiParam(value = "If we want to get the published version then this parameter has to be set to true.") @RequestParam(value = "publish", required = false) Boolean publish);


    @ApiOperation(value = "", notes = "", response = Void.class, tags = { "Datasets" })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Options for this operation are returned.", response = Void.class) })
    @RequestMapping(value = "/datasets/{id}", produces = { "application/json" }, method = RequestMethod.OPTIONS)
    ResponseEntity<Void> getDatasetOp(
            @ApiParam(value = "", required = true) @PathVariable("id") String id,
            @ApiParam(value = "If we want to store the published version then this parameter has to be set to true.") @RequestParam(value = "publish", required = false) Boolean publish);

    @ApiOperation(value = "", notes = "", response = Void.class, tags = { "Datasets" })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Options for this operation are returned.", response = Void.class) })
    @RequestMapping(value = "/datasets", produces = { "application/json" }, method = RequestMethod.OPTIONS)
    ResponseEntity<Void> getDatasetsOp();

    @ApiOperation(value = "", notes = "", response = Void.class, tags = { "Datasets" })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Options for this operation are returned.", response = Void.class) })
    @RequestMapping(value = "/datasets/{id}/export/{format}", produces = { "application/json" }, method = RequestMethod.OPTIONS)
    ResponseEntity<Void> getExportOp(
            @ApiParam(value = "", required = true) @PathVariable("id") String id, @ApiParam(value = "", required = true) @PathVariable("format") String format);

    @ApiOperation(value = "", notes = "", response = Void.class, tags = { "Datasets" })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Options for this operation are returned.", response = Void.class) })
    @RequestMapping(value = "/datasets/{ids}/move", produces = { "application/json" }, method = RequestMethod.OPTIONS)
    ResponseEntity<Void> getMoveOp(
            @ApiParam(value = "IDs of the copied datasets", required = true) @PathVariable("ids") List<String> ids);

    @ApiOperation(value = "Get the hierarchical path of a document", notes = "Retrieve an array of ID of all parents leading to the given dataset ID.", response = Void.class, tags = { "Datasets", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Array of IDs.", response = Void.class) })
    @RequestMapping(value = "/datasets/{id}/path", produces = { "application/json" }, method = RequestMethod.GET)
    ResponseEntity<List<String>> getPath(
            @ApiParam(value = "The ID of the dataset.", required = true) @PathVariable("id") String id);

    @ApiOperation(value = "", notes = "", response = Void.class, tags = { "Datasets" })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Options for this operation are returned.", response = Void.class) })
    @RequestMapping(value = "/datasets/{id}/path", produces = { "application/json" }, method = RequestMethod.OPTIONS)
    ResponseEntity<Void> getPathOp(
            @ApiParam(value = "", required = true) @PathVariable("id") String id);

    @ApiOperation(value = "Move a dataset or tree under another dataset", notes = "xxx", response = Void.class, tags = { "Datasets", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Datasets have been moved successfully.", response = Void.class) })
    @RequestMapping(value = "/datasets/{ids}/move", produces = { "application/json" }, method = RequestMethod.POST)
    ResponseEntity<Void> moveDatasets(
            @ApiParam(value = "IDs of the copied datasets", required = true) @PathVariable("ids") List<String> ids,
            @ApiParam(value = "...", required = true) @Valid @RequestBody Data1 data);


    @ApiOperation(value = "", notes = "", response = Void.class, tags = { "Datasets" })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Options for this operation are returned.", response = Void.class) })
    @RequestMapping(value = "/datasets/{ids}/copy", produces = { "application/json" }, method = RequestMethod.OPTIONS)
    ResponseEntity<Void> getCopyOp(
            @ApiParam(value = "IDs of the copied datasets", required = true) @PathVariable("ids") List<String> ids);

}
