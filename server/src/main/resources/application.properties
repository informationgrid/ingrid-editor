#spring.profiles.active=default

# the context path for the application
server.servlet.context-path=/

# the port the application should run
server.port=${SERVER_PORT:80}

# this is needed to correctly handle https especially when session is timed out
server.forward-headers-strategy=framework

spring.jackson.serialization.WRITE_DATES_AS_TIMESTAMPS=false
spring.jackson.serialization.FAIL_ON_EMPTY_BEANS=false
spring.jackson.parser.allow-unquoted-control-chars=true
#spring.jackson.time-zone=Europe/Berlin

# FIXME: try to avoid ant path matcher, but problem with swagger-ui
spring.mvc.pathmatch.matching-strategy=ant_path_matcher

# smtp server
spring.mail.host=${MAIL_HOST:mailrelay}
mail.from=${MAIL_FROM:noreply@wemove.com}
mail.subject=Willkommen beim IGE-NG
mail.body=Herzlich Willkommen beim IGE-NG, {0} {1}!\n\nVielen Dank f\u00fcr Ihre Registrierung bei {2}\n\nViele Gr\u00fc\u00dfe\nIhr Team vom IGE-NG
mail.bodyWithPassword=Herzlich Willkommen beim IGE-NG, {0} {1}!\n\nVielen Dank f\u00fcr Ihre Registrierung bei {2}\n\nIhre Zugangsdaten lauten:\n\n    Login: {4}\n    Passwort: {3}\n\nBitte beachten Sie, dass Sie das Passwort beim ersten Einloggen \u00e4ndern m\u00fcssen.\n\nViele Gr\u00fc\u00dfe\nIhr Team vom IGE-NG
mail.subjectResetPassword=IGE-NG Passwort zur\u00fcckgesetzt
mail.bodyResetPassword=Ihr IGE-NG Passwort wurde zur\u00fcckgesetzt.\n\nIhre Zugangsdaten lauten:\n\n    Login: {4}\n    Passwort: {3}\n\nBitte beachten Sie, dass Sie das Passwort beim ersten Einloggen \u00e4ndern m\u00fcssen.\n\nViele Gr\u00fc\u00dfe\nIhr Team vom IGE-NG
# Enable response compression
server.compression.enabled=true

# The comma-separated list of mime types that should be compressed
server.compression.mime-types=text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json

# Compress the response only if the response size is at least 1KB
server.compression.min-response-size=1024

# Enable HTTP/2 support, if the current environment supports it
server.http2.enabled=true

# uuid should only be used when conflict with other indices
app.uuid=
app.enable-csrf=false
app.enable-cors=false
app.enable-https=true
app.host=${APP_HOST_URL:https://ige-ng.informationgrid.eu}
app.instanceId=${APP_INSTANCE_ID:ige-ng}
app.indexPageSize=100

# control if documents will be permanently deleted or just marked
app.mark-instead-of-delete=true

# limit max result of geo thesaurus
geothesaurus.max.results=50

spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=10000MB
spring.servlet.multipart.max-request-size=10MB

# database configuration
spring.sql.init.mode=never
spring.sql.init.platform=postgres
spring.datasource.url=jdbc:postgresql://${DATABASE_HOST:localhost}:${DATABASE_PORT:5432}/${DATABASE_NAME:ige}
spring.datasource.username=${DATABASE_USERNAME:admin}
spring.datasource.password=${DATABASE_PASSWORD:admin}
spring.jpa.show-sql=false
spring.jpa.hibernate.ddl-auto=none
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.jdbc.time_zone=UTC
spring.jpa.open-in-view=true

spring.data.jpa.repositories.enabled=true
spring.data.jdbc.repositories.enabled=false

# quartz
spring.quartz.startup-delay=10s
spring.quartz.job-store-type=jdbc
spring.quartz.jdbc.initialize-schema=never
spring.quartz.properties.org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.PostgreSQLDelegate

#keycloak configuration
keycloak.auth-server-url=${KEYCLOAK_URL:https://keycloak.informationgrid.eu}
keycloak.auth-server-url-frontend=${KEYCLOAK_URL_FRONTEND:${keycloak.auth-server-url}}
keycloak.realm=${KEYCLOAK_REALM:InGrid}
keycloak.resource=${KEYCLOAK_CLIENT_ID:ige-ng}-backend
frontend.keycloak.resource=${KEYCLOAK_RESOURCE:ige-ng}-frontend
frontend.keycloak.enable=true
frontend.support-email=support@wemove.com
#spring.main.allow-bean-definition-overriding=true

# Keycloak via OAuth2
spring.security.oauth2.client.registration.keycloak.client-id=${keycloak.resource}
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak.scope=openid
spring.security.oauth2.client.provider.keycloak.issuer-uri=${KEYCLOAK_URL:https://keycloak.informationgrid.eu}/realms/${keycloak.realm}
spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username
spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_URL:https://keycloak.informationgrid.eu}/realms/${keycloak.realm}

springdoc.swagger-ui.config-url=/v3/api-docs/swagger-config
springdoc.swagger-ui.url=/v3/api-docs
springdoc.swagger-ui.docExpansion=none
springdoc.swagger-ui.tagsSorter=alpha
springdoc.packagesToScan=de.ingrid.igeserver.api
springdoc.swagger-ui.disable-swagger-default-url=true
#springdoc.swagger-ui.use-root-path=true
#springdoc.pathsToMatch=/api/import/*
#springdoc.swagger-ui.path=/swagger-ui.html
#springdoc.api-docs.path=/api-docs
springdoc.api-docs.enabled=false

# answer all options request positive
#spring.mvc.dispatch-options-request=true

codelist.url=${CODELIST_REPO_URL:https://dev.informationgrid.eu/codelist-repo}
codelist.userName=${CODELIST_REPO_USER:}
codelist.password=${CODELIST_REPO_PASSWORD:}
#codelist.data-path=codelists

elastic.enabled=true
#elastic.remoteHosts=
elastic.communication.ibus=false
elastic.indexWithAutoId=false
#elastic.remoteHosts=

# scheduler: second, minute, hour, day of month, month, day(s) of week
cron.codelist.expression=0 */30 * * * *
cron.publish.expression=0 30 0 * * *
cron.expired.datasets.expression=0 30 5 * * *

# zabbix monitoring
zabbix.detailURLTemplate=${ZABBIX_DETAIL_URL_TEMPLATE:}
zabbix.uploadURL=${ZABBIX_UPLOAD_URL:}
zabbix.apiURL=${ZABBIX_API_URL:}
zabbix.apiKey=${ZABBIX_API_KEY:}
zabbix.catalogs=${ZABBIX_CATALOGS:}
zabbix.checkDelay=${ZABBIX_CHECK_DELAY:8h}
zabbix.checkCount=${ZABBIX_CHECK_COUNT:3}

# extension points
pipes.filter.order={\
  'PreUpdatePipe': {\
    'de.ingrid.igeserver.persistence.filter.update.PreUpdateDefaultValidator',\
    'de.ingrid.igeserver.persistence.filter.update.PreDefaultDocumentUpdater'\
  },\
  'PostUpdatePipe': {\
    'de.ingrid.igeserver.persistence.filter.update.PostDefaultUploadSaver'\
  },\
  'PostPublishPipe': {\
    'de.ingrid.igeserver.persistence.filter.publish.PostDefaultUploadPublisher'\
  },\
  'PostUnpublishPipe': {\
    'de.ingrid.igeserver.persistence.filter.unpublish.PostDefaultUploadUnpublisher'\
  },\
  'PostRevertPipe': {\
    'de.ingrid.igeserver.persistence.filter.revert.PostDefaultUploadReverter'\
  }\
}


# UPLOAD SECTION

# -- Upload settings --

# Storage implementation class
upload.impl=de.ingrid.mdek.upload.storage.impl.FileSystemStorage

# Base directory for uploaded documents
upload.docsdir=/tmp/ingrid/upload/documents/

# Directory for partial uploads
upload.partsdir=/tmp/ingrid/upload/parts/

# Temporary directory used by the upload process (e.g. files will be put there for validation)
upload.tempdir=/tmp/ingrid/upload/tmp/

upload.external.url=/documents/

# List of activated validators (comma separated list of validator names)
# NOTE: Each validator name must have an entry in the upload.validators.config property
#
# For virusscan functionality on upload, enable "virusscan" in upload.validators as
# below. Also the virusscan has to be enabled in upload.validators.config.
#
# To enable the virusscan on a scheduled base, make sure to enable the spring
# configuration under webapps/WEB-INF/override. This would override the bean "scheduler".
# Make sure the beans in virus-scan-sophos.xml.template align with application-context.xml.
#
# upload.validators=filename,virusscan
#
# add 'filetype' validator, the extension of an uploaded file is checked and if the filetype is not allowed, the upload is aborted.
upload.validators=filename,size

# Validator definitions (json encoded)
# NOTE: Each validator definition must have the following properties:
#       - impl: Fully qualified class name of a de.ingrid.mdek.upload.storage.validate.Validator implementation
#       - properties: Map of initialization properties which will be used as parameter when calling the Validator.initialize() method
#
# Possible: configurations
#
# upload.validators.config={\
#    "filename":{\
#        "impl":"de.ingrid.mdek.upload.storage.impl.FileSystemStorage$NameValidator",\
#        "properties":{\
#        }\
#    },\
#    "size":{\
#        "impl":"de.ingrid.mdek.upload.storage.validate.impl.SizeValidator",\
#        "properties":{\
#            "maxFileSize":"2147483648",\
#            "maxDirSize":"5368709120"\
#        }\
#    },\
#    "virusscan":{\
#        "impl":"de.ingrid.mdek.upload.storage.validate.impl.VirusScanValidator",\
#        "properties":{\
#            "command":"\\\\path\\\\to\\\\sophos\\\\savscan -f -all -archive -mime %FILE%",\
#            "virusPattern":"(?m)^>>> Virus '([^']+)' found in file (.+)$",\
#            "cleanPattern":"(?m)^No viruses were discovered.$"\
#        }\
#    },\
#    "virusscan":{\
#        "impl":"de.ingrid.mdek.upload.storage.validate.impl.RemoteServiceVirusScanValidator",\
#        "properties":{\
#            "url":"http://localhost:3000/v1/"\
#        }\
#    }\,
#    "filetype":{\
#        "impl":"de.ingrid.mdek.upload.storage.validate.impl.ExtensionValidator",\
#        "properties":{\
#            "allowedExtensions": "gif,jpeg,png,svg,webp,bmp,ico"\
#        }\
#    }\
#}
# the allowed extensions are to be inserted as comma separated in a string

upload.validators.config={\
    "filename":{\
        "impl":"de.ingrid.mdek.upload.storage.impl.FileSystemStorage$NameValidator",\
        "properties":{\
        }\
    },\
    "size":{\
        "impl":"de.ingrid.mdek.upload.storage.validate.impl.SizeValidator",\
        "properties":{\
            "maxFileSize":"1500000000",\
            "maxDatasetSize":"6000000000"\
        }\
    },\
    "filetype":{\
        "impl":"de.ingrid.mdek.upload.storage.validate.impl.ExtensionValidator",\
        "properties":{\
            "allowedExtensions": "gif,jpeg,png,svg,webp,bmp,ico,jpg"\
        }\
    }\
}

# Schedule for background cleanup job (cron pattern), default: every day at 1 am
upload.cleanup.schedule=0 0 1 * * *
# Schedule for background expired uploads job (cron pattern), default: every day at 2 am
upload.expired.schedule=0 0 2 * * *

# Minimum age of an unsaved file to be deleted by the background cleanup job (hours), 0=Never, default: never
upload.trash.retentionTime=0

# Minimum age of an file in the trash to be deleted by the background cleanup job (hours), 0=Never, default: 24 hours
upload.unsaved.retentionTime=24

# Schedule for background virus scan job (quartz cron pattern), default: every day at 2 am
# to activate uncomment viusscan job in  WEB-INF/application-context.xml
# upload.virusscan.schedule=0 0 2 * * ? *

# Directory for quarantined infected uploads
upload.virusscan.quarantinedir=/tmp/ingrid/upload/quarantine/
