/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package de.ingrid.igeserver.api;

import de.ingrid.igeserver.model.Role;
import de.ingrid.igeserver.model.Role1;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;

@Tag(name = "Roles", description = "the roles API")
public interface RolesApi {

    @Operation(description = "Creates a new role. If role with a given login already exists an error will be returned.")
    @ApiResponses(value = {@ApiResponse(responseCode = "200", description = "Role was successfully updated"),
            @ApiResponse(responseCode = "406", description = "A role with the given login does not exist and cannot be updated")})

    @RequestMapping(value = "/roles/{id}", produces = {"application/json"}, method = RequestMethod.POST)
    ResponseEntity<Void> createRole(
            @Parameter(description = "The unique id of the user.", required = true) @PathVariable("id") String id,
            @Parameter(description = "Save the role into the database.", required = true) @Valid @RequestBody Role1 role);

    @Operation(description = "Delete a role with a given ID. If role with a given id does not exists an error will be returned.")
    @ApiResponses(value = {@ApiResponse(responseCode = "200", description = "Role was successfully deleted"),
            @ApiResponse(responseCode = "406", description = "A role with the given id does not exist and cannot be deleted")})

    @RequestMapping(value = "/roles/{id}", produces = {"application/json"}, method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteRole(
            @Parameter(description = "The unique id of the role.", required = true) @PathVariable("id") String id);

    @Operation(description = "Get the role with the given ID.")
    @ApiResponses(value = {@ApiResponse(responseCode = "200", description = "Returns the role")})
    @RequestMapping(value = "/roles/{id}", produces = {"application/json"}, method = RequestMethod.GET)
    ResponseEntity<String> getRole(
            @Parameter(description = "The unique id of the role.", required = true) @PathVariable("id") String id);

    @Operation(description = "")
    @ApiResponses(value = {@ApiResponse(responseCode = "200", description = "Returns the list of roles")})
    @RequestMapping(value = "/roles", produces = {"application/json"}, method = RequestMethod.GET)
    ResponseEntity<String> listRoles();

    @Operation(description = "Updates a role. If role could not be found an error will be returned.")
    @ApiResponses(value = {@ApiResponse(responseCode = "200", description = "Role was successfully created"),
            @ApiResponse(responseCode = "406", description = "A role already exists with the given login")})
    @RequestMapping(value = "/roles/{id}", produces = {"application/json"}, method = RequestMethod.PUT)
    ResponseEntity<Void> updateRole(
            @Parameter(description = "The unique id of the role.", required = true) @PathVariable("id") String id,
            @Parameter(description = "Save the role into the database.", required = true) @Valid @RequestBody Role role);

}
