import java.nio.file.Paths
import gg.jte.ContentType

buildscript {
    ext.kotlin_version = '1.7.20' // Required for Kotlin integration
    ext.spring_boot_version = '2.7.4'
    ext.hibernate_version = '5.6.12.Final' // Hibernate 6 is only supported by Spring Boot 3
    ext.jackson_version = '2.13.4'
    ext.kotest_version = '5.5.1'
    ext.jte_version = '2.2.2'
    ext.elastic_version = '7.17.6'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version" // Required for Kotlin integration
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
        // See https://kotlinlang.org/docs/reference/compiler-plugins.html#spring-support
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"
        classpath "org.hibernate:hibernate-gradle-plugin:$hibernate_version"
    }
}

plugins {
    id 'base'
    id 'java'
    id 'idea'
    id 'maven-publish'
    id 'com.google.cloud.tools.jib' version '3.3.0'
    id "com.gorylenko.gradle-git-properties" version "2.4.0"
    id 'io.kotest' version '0.3.9'
    id "com.github.ben-manes.versions" version "0.42.0"
    id "gg.jte.gradle" version "$jte_version"
}

apply plugin: 'kotlin' // Required for Kotlin integration
apply plugin: "kotlin-spring" // https://kotlinlang.org/docs/reference/compiler-plugins.html#spring-support
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.hibernate.orm'
apply plugin: 'kotlin-noarg'
//apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-allopen'

repositories {
    maven {
        url = 'https://nexus.informationgrid.eu/repository/maven-public'
    }
    mavenCentral()
}

configurations {
    webapp
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude group: 'org.springframework.cloud', module: 'spring-cloud-bus'
        exclude group: 'com.sun.mail', module: 'javax.mail'
        exclude group: 'javax.mail', module: 'mailapi'
    }
}

// Profile support
if (!hasProperty('buildProfile') || getProperty('buildProfile') == 'cypress') apply from: "profile-dev.gradle"

// for faster development ignore frontend project and its long build time
if (hasProperty('buildProfile')) {
    dependencies {
        webapp project( ':frontend')
    }

    def unzippedDir = file('build/resources/main').getAbsolutePath()
    task unzip(type:Copy) {
        dependsOn(configurations.webapp)
        into unzippedDir from zipTree(configurations.webapp.singleFile)
    }
    jar.finalizedBy(unzip)

    bootJar {
        dependsOn(unzip)
    }

    bootJarMainClassName {
        dependsOn(unzip)
    }

    compileTestKotlin {
        dependsOn(unzip)
    }

    test {
        dependsOn(unzip)
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version" // Required for Kotlin integration
    implementation "org.jetbrains.kotlin:kotlin-reflect"
    implementation 'org.apache.logging.log4j:log4j-api-kotlin:1.2.0'
    implementation 'org.apache.tika:tika-core:2.5.0'
    implementation 'org.glassfish.jersey.media:jersey-media-multipart:3.0.8'

    // Spring
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'io.pebbletemplates:pebble-spring-boot-starter:3.1.6'
    implementation 'org.springframework.boot:spring-boot-starter-tomcat'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.security:spring-security-acl'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
//    implementation 'org.slf4j:slf4j-nop:1.7.36'
//    implementation 'org.slf4j:slf4j-api:1.7.36'

    // spring properties metadata
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
//    kapt("org.springframework.boot:spring-boot-configuration-processor")

    // Jackson
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_version"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:$jackson_version"
//    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_version"

    // JSON schema validation
    implementation 'net.pwall.json:json-kotlin-schema:0.36'

    // Keycloak
    implementation 'org.keycloak:keycloak-spring-boot-starter:18.0.2'
    implementation 'org.keycloak:keycloak-admin-client:18.0.2'

    // Markdown
    implementation "com.atlassian.commonmark:commonmark:0.17.0"
    implementation "com.atlassian.commonmark:commonmark-ext-yaml-front-matter:0.17.0"
    implementation "com.atlassian.commonmark:commonmark-ext-gfm-tables:0.17.0"

    implementation 'org.springdoc:springdoc-openapi-ui:1.6.11' // Attention: also update SwaggerDocumentationConfig.kt
    implementation 'org.springdoc:springdoc-openapi-kotlin:1.6.11'

    // PostgreSQL
    implementation 'org.postgresql:postgresql:42.5.0'
    implementation "org.hibernate:hibernate-core:$hibernate_version"
    implementation 'com.vladmihalcea:hibernate-types-55:2.19.2'

    implementation 'com.github.fge:json-schema-validator:2.2.6'
    implementation('de.ingrid:ingrid-codelist-service:5.14.0') {
        exclude group: 'log4j', module: 'log4j'
    }
    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.apache.commons:commons-text:1.10.0'

    // Test
    testImplementation "io.kotest:kotest-runner-junit5:$kotest_version" // for kotest framework
    testImplementation "io.kotest:kotest-assertions-core-jvm:$kotest_version" // for kotest core jvm assertions
    testImplementation "io.kotest:kotest-assertions-json:$kotest_version" // for comparing json
    testImplementation 'io.kotest.extensions:kotest-extensions-spring:1.1.2' // to wire dependencies using Spring
    testImplementation 'io.mockk:mockk:1.13.2'
    testImplementation "com.ninja-squad:springmockk:3.1.1"
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "org.mockito"
    }
    testImplementation 'org.springframework.security:spring-security-test'

    // iBus communication
    implementation('de.ingrid:ingrid-elasticsearch-tools:5.15.0-SNAPSHOT')

    implementation('de.ingrid:ingrid-ibus-client:5.13.0') {
        exclude group: 'org.apache.logging.log4j'
        exclude group: 'org.slf4j'
    }

    // template engine jte
    implementation "gg.jte:jte:$jte_version"
    implementation "gg.jte:jte-kotlin:$jte_version"
}

dependencyManagement {
    dependencies {
        dependency "org.elasticsearch:elasticsearch:$elastic_version"
        dependency "org.elasticsearch.client:elasticsearch-rest-client:$elastic_version"
        dependency "org.elasticsearch.plugin:transport-netty4-client:$elastic_version"
        dependency "org.elasticsearch.client:transport:$elastic_version"
    }
}

group = 'de.ingrid'
description = 'IGE-NG Server'
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

springBoot {
    buildInfo()
}

/*if (hasProperty('filename')) {
    bootJar {
        dependsOn(unzip)
        archiveFileName=getProperty('filename')
    }
}

jar {
    enabled = false

    // This line of code recursively collects and copies all of a project's files
    // and adds them to the JAR itself. One can extend this task, to skip certain
    // files or particular types at will
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
}*/

allOpen {
    annotation("javax.persistence.Entity")
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "17"
    }
}

jte {
    sourceDirectory = Paths.get(project.projectDir.absolutePath, "src", "main", "resources", "templates", "export")
    contentType = ContentType.Plain
    trimControlStructures = true
    precompile()
    generate()
}


tasks.named('compileKotlin') {
    dependsOn(tasks.generateJte)
}


test {
    ignoreFailures = true
    useJUnitPlatform()
}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

// create docker image
jib {
    // tag for image on develop branch will be latest
    // tag for image on master branch will be the version
    // tag for image on any feature branch will have the branch name
    def tag = project.ext.branch_name == "develop" ? "latest" : project.ext.branch_name
    if (!project.version.contains("-")) {
        tag = version
    }
    tag = tag.replaceAll("/", "-")
    from {
        image = 'eclipse-temurin:17-jre-focal'
    }
    to {
        image = 'docker-registry.wemove.com/ingrid-ige-ng:' + tag
    }
    container {
        creationTime = 'USE_CURRENT_TIMESTAMP'
        entrypoint = ['/run.sh']
    }
    extraDirectories {
        permissions = [
            '/*.sh': '755'
        ]
        paths {
            path {
                from = file('src/main/jib')
            }
            path {
                from = file('build/resources/main/static')
                into = '/app/resources/static'
            }
        }
    }
}

noArg {
    annotation('de.ingrid.igeserver.annotations.NoArgs')
}

hibernate {
    enhance {
        enableLazyInitialization= true
        enableDirtyTracking = true
        enableAssociationManagement = true
        enableExtendedEnhancement = false
    }
}

if (hasProperty('buildDockerImage')) {
    tasks.assemble.dependsOn tasks.jib
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
//    options.deprecation = true
//    options.compilerArgs << "-Xlint:unchecked"
}
