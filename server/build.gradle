import gg.jte.ContentType
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

import java.nio.file.Paths

import static org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_21

buildscript {
    ext.kotlin_version = '1.9.25'
    ext.spring_boot_version = '3.3.2'
    ext.kotest_version = '5.9.1'
    ext.jte_version = '3.1.12'
    ext.geotools_version = '28.2'
    ext['log4j2.version'] = '2.23.1'
}

plugins {
    id 'base'
    id 'java'
    id "org.jetbrains.kotlin.jvm" version "$kotlin_version"
    id "org.jetbrains.kotlin.plugin.spring" version "$kotlin_version"
    id "org.jetbrains.kotlin.plugin.noarg" version "$kotlin_version"
    id "org.jetbrains.kotlin.plugin.allopen" version "$kotlin_version"
    id "org.springframework.boot" version "$spring_boot_version"
    id "io.spring.dependency-management" version "1.1.6"
    id 'idea'
    id 'maven-publish'
    id 'com.google.cloud.tools.jib' version '3.4.3'
    id "com.gorylenko.gradle-git-properties" version "2.4.2"
    id 'io.kotest' version '0.4.11'
    id "com.github.ben-manes.versions" version "0.51.0"
    id "gg.jte.gradle" version "$jte_version"
    id "org.hibernate.orm" version "6.5.2.Final"
    id "org.jlleitschuh.gradle.ktlint" version "12.1.1"
}

repositories {
    maven {
        url = 'https://nexus.informationgrid.eu/repository/maven-public'
    }
    maven {
        url "https://repo.osgeo.org/repository/release/"
    }
    mavenCentral()
    maven {
        url "https://maven.tryformation.com/releases"
        content {
            includeGroup("com.jillesvangurp")
        }
    }
}

configurations {
    webapp
    configureEach {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude group: 'org.springframework.cloud', module: 'spring-cloud-bus'
        exclude group: 'com.sun.mail', module: 'javax.mail'
        exclude group: 'javax.mail', module: 'mailapi'
        exclude group: 'commons-logging', module: 'commons-logging'
    }
}

// Profile support
if (!hasProperty('buildProfile') || getProperty('buildProfile') == 'cypress') apply from: "profile-dev.gradle"

// for faster development ignore frontend project and its long build time
if (hasProperty('buildProfile')) {
    dependencies {
        webapp project( ':frontend')
    }

    def unzippedDir = file('build/resources/main').getAbsolutePath()
    task unzip(type:Copy) {
        dependsOn(configurations.webapp)
        into unzippedDir from zipTree(configurations.webapp.singleFile)
    }
    jar.finalizedBy(unzip)

    bootJar {
        dependsOn(unzip)
    }

    resolveMainClassName {
        dependsOn(unzip)
    }

    compileTestKotlin {
        dependsOn(unzip)
    }

    test {
        dependsOn(unzip)
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version" // Required for Kotlin integration
    implementation "org.jetbrains.kotlin:kotlin-reflect"
    implementation 'org.apache.logging.log4j:log4j-api-kotlin:1.4.0'
    implementation 'org.apache.tika:tika-core:2.9.2'
    implementation 'org.glassfish.jersey.media:jersey-media-multipart:3.1.7'

    // Spring
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'io.pebbletemplates:pebble-spring-boot-starter:3.1.6'
    implementation 'org.springframework.boot:spring-boot-starter-tomcat'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.security:spring-security-acl'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'

    // spring properties metadata
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
//    kapt("org.springframework.boot:spring-boot-configuration-processor")

    // Jackson
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-xml"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"

    // JSON schema validation
    implementation 'net.pwall.json:json-kotlin-schema:0.47'

    // Keycloak
    // Keycloak implementation explained here: https://github.com/keycloak/keycloak/issues/12514#issuecomment-1209109769
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.keycloak:keycloak-admin-client:24.0.5'

    // OpenAI
    // import Kotlin API client BOM
    implementation platform('com.aallam.openai:openai-client-bom:3.6.3')

    // define dependencies without versions
    implementation 'com.aallam.openai:openai-client'
    runtimeOnly 'io.ktor:ktor-client-okhttp'
    implementation "io.ktor:ktor-client-java"
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.1")

    // Markdown
    implementation "org.commonmark:commonmark:0.22.0"
    implementation "org.commonmark:commonmark-ext-yaml-front-matter:0.22.0"
    implementation "org.commonmark:commonmark-ext-gfm-tables:0.22.0"

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'

    // PostgreSQL
    implementation 'org.postgresql:postgresql:42.7.3'
    implementation "org.hibernate.orm:hibernate-core"
    implementation 'io.hypersistence:hypersistence-utils-hibernate-63:3.7.5'

    implementation "de.ingrid:ingrid-codelist-service:7.3.0"
    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'org.apache.commons:commons-lang3:3.15.0'
    implementation 'org.apache.commons:commons-text:1.12.0'

    // GeoTools
    implementation("org.geotools.xsd:gt-xsd-gml3:$geotools_version") {
        exclude group: 'org.geotools', module: 'gt-coverage'
        exclude group: 'org.geotools', module: 'gt-metadata'
        exclude group: 'commons-pool', module: 'commons-pool'
        exclude group: 'net.sf.geographiclib', module: 'GeographicLib-Java'
        exclude group: 'javax.media', module: 'jai_core'
        exclude group: 'org.ejml', module: 'ejml-ddense'
        exclude group: 'jgridshift', module: 'jgridshift'
        exclude group: 'org.jdom', module: 'jdom2'
        exclude group: 'org.eclipse.emf', module: 'org.eclipse.emf.ecore.xmi'
        exclude group: 'commons-jxpath', module: 'commons-jxpath'
    }
    implementation("org.geotools:gt-metadata:$geotools_version") {
        exclude group: 'javax.media', module: 'jai_core'
        exclude group: 'commons-pool', module: 'commons-pool'
        exclude group: 'systems.uom', module: 'systems-common-java8'
    }
    implementation("org.geotools:gt-geojson:$geotools_version") {
        exclude group: 'javax.media', module: 'jai_core'
    }

    // RDF for DCAT-AP.de
    implementation "org.apache.jena:apache-jena-libs:4.7.0"

    // Test
    testImplementation "io.kotest:kotest-runner-junit5:$kotest_version" // for kotest framework
    testImplementation "io.kotest:kotest-assertions-core-jvm:$kotest_version" // for kotest core jvm assertions
    testImplementation "io.kotest:kotest-assertions-json:$kotest_version" // for comparing json
    testImplementation 'io.kotest.extensions:kotest-extensions-spring:1.3.0' // to wire dependencies using Spring
    testImplementation 'io.mockk:mockk:1.13.12'
    testImplementation "com.ninja-squad:springmockk:4.0.2"
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "org.mockito"
    }
    testImplementation 'org.springframework.security:spring-security-test'

    // iBus communication
    implementation("com.jillesvangurp:search-client:2.2.0")

    // for javax.annotation-support for elasticsearch-tools
//    implementation("org.jboss.spec.javax.annotation:jboss-annotations-api_1.3_spec:2.0.1.Final")

    implementation('de.ingrid:ingrid-ibus-client:7.0.0') {
        exclude group: 'org.apache.logging.log4j'
        exclude group: 'org.slf4j'
    }

    // template engine jte
    implementation "gg.jte:jte-spring-boot-starter-3:$jte_version"
    implementation "gg.jte:jte:$jte_version"
    implementation "gg.jte:jte-kotlin:$jte_version"
}

dependencyManagement {
    dependencies {
//        dependency "org.elasticsearch:elasticsearch:$elastic_version"
//        dependency "org.elasticsearch.client:elasticsearch-rest-client:$elastic_version"
//        dependency "org.elasticsearch.plugin:transport-netty4-client:$elastic_version"
//        dependency "org.elasticsearch.client:transport:$elastic_version"
        dependency "org.yaml:snakeyaml:2.0"
        dependency "commons-collections:commons-collections:3.2.2"

    }
    imports {
        mavenBom 'com.fasterxml.jackson:jackson-bom:2.17.2' // allow Nulls.SKIP function, which works from 2.16.0 in kotlin data classes
    }
}

group = 'de.ingrid'
description = 'IGE-NG Server'

springBoot {
    buildInfo()
}

if (hasProperty('filename')) {
    bootJar {
        dependsOn(unzip)
        archiveFileName=getProperty('filename')
    }
}

jar {
    enabled = false

    // This line of code recursively collects and copies all of a project's files
    // and adds them to the JAR itself. One can extend this task, to skip certain
    // files or particular types at will
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
}

allOpen {
    annotation("jakarta.persistence.Entity")
}

tasks.withType(KotlinCompile).configureEach {
    compilerOptions {
        jvmTarget.set(JVM_21)
    }
}

tasks.register('updateGitHooks', Copy) {
    mustRunAfter("generateGitProperties")
    from '../scripts/pre-commit'
    into '../.git/hooks'
}

jte {
    sourceDirectory = Paths.get(project.projectDir.absolutePath, "src", "main", "resources", "templates")
    contentType = ContentType.Plain
    trimControlStructures = true
    precompile()
    generate()
}

tasks.named('generateJte') {
    mustRunAfter(tasks.runKtlintCheckOverMainSourceSet)
}

tasks.named('compileKotlin') {
    dependsOn(tasks.updateGitHooks)
    dependsOn(tasks.generateJte)
}


test {
    ignoreFailures = true
    systemProperty 'user.timezone', 'Europe/Berlin'
    useJUnitPlatform()
}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

// create docker image
jib {
    // tag for image on develop branch will be latest
    // tag for image on master branch will be the version
    // tag for image on any feature branch will have the branch name
    def name
    if (project.hasProperty("branch_name")) name = project.ext.branch_name else name = "???"
    def tag = name == "develop" ? "latest" : name
    tag = tag.replaceAll("/", "-")
    from {
        image = 'bellsoft/liberica-openjre-alpine:21'
    }
    to {
        // in case we build a release we also add release tag from version
        if (!project.version.contains("-")) {
            if (System.env.BUILD_NUMBER == "1") {
                tags = [version.toString(), version.toString() + '-release']
            } else {
                tags = [version.toString()]
            }
        }
        image = 'docker-registry.wemove.com/ingrid-ige-ng:' + tag
    }
    container {
        creationTime = 'USE_CURRENT_TIMESTAMP'
        entrypoint = ['/run.sh']
    }
    extraDirectories {
        permissions = [
                '/*.sh': '755',
                '/logs': '777',
                '/codelists': '777'
        ]
        paths {
            path {
                from = file('src/main/jib')
            }
            path {
                from = file('build/resources/main/static')
                into = '/app/resources/static'
            }
        }
    }
}

noArg {
    annotation('de.ingrid.igeserver.annotations.NoArgs')
}

hibernate {
    enhancement {
        lazyInitialization = true
        dirtyTracking = true
//        associationManagement = true
//        extendedEnhancement = false
    }
}

if (hasProperty('buildDockerImage')) {
    tasks.assemble.dependsOn tasks.jib
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}

spotless {

    kotlin {
        licenseHeaderFile(file('../LICENSE')).updateYearWithLatest(true)
        ktlint()
    }
    java {
        target 'src/*/java/**/*.java'
        licenseHeaderFile(file('../LICENSE')).updateYearWithLatest(true)
    }
}

tasks.register('checkForSnapshots', {
    doLast {
        def snapshots = new ArrayList()
        def projectConfigurations = project.configurations.findAll { true }

        projectConfigurations.each {
            if (it.isCanBeResolved()) {
                it.resolvedConfiguration.resolvedArtifacts.each {
                    if (it.moduleVersion.id.version.endsWith('-SNAPSHOT')) {
                        snapshots.add(it)
                    }
                }
            }
        }
        if (!snapshots.isEmpty()) {
            throw new GradleException("Please get rid of snapshots for following dependencies before releasing $snapshots")
        } else {
            println "No snapshot dependencies found!"
        }
    }
})

